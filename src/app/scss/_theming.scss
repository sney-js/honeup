@import "palette";

// For a given hue in a palette, return the contrast color from the map of contrast palettes.
// @param $color-map
// @param $hue
@function map-contrast($palette, $hue: default) {
    @return map-get(map-get($palette, contrast), $hue);
}
@function map-border($palette, $hue: default) {
    @return map-get(map-get($palette, border), $hue);
}

// Creates a map of hues to colors for a theme. This is used to define a theme palette in terms
// of the Material Design hues.
// @param $color-map
// @param $primary
// @param $lighter
@function map-palette($base-palette, $default: 500) {
    $result: map_merge(
        $base-palette,
        (
            default: map-get($base-palette, $default),
            default-contrast: map-contrast($base-palette, $default),
            default-border: map-border($base-palette, $default),
        )
    );

    // For each hue in the palette, add a "-contrast" color to the map.
    @each $hue, $color in $base-palette {
        @if type-of($color) != "list" and type-of($color) != "map" {
            $result: map_merge(
                $result,
                (
                    "#{$hue}-border": map-contrast($base-palette, $hue),
                )
            );
        }
    }

    // For each hue in the palette, add a "-border" color to the map.
    @each $hue, $color in $base-palette {
        @if type-of($color) != "list" and type-of($color) != "map" {
            $result: map_merge(
                $result,
                (
                    "#{$hue}-border": map-border($base-palette, $hue),
                )
            );
        }
    }

    @return $result;
}

// Gets a color from a theme palette (the output of mat-palette).
// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured
// hues (default, lighter, darker), or any of the aforementioned prefixed with "-contrast".
//
// @param $color-map The theme palette (output of mat-palette).
// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will
//     be treated as opacity.
// @param $opacity The alpha channel value for the color.
@function map-color($palette, $hue: default, $opacity: null) {
    // If hueKey is a number between zero and one, then it actually contains an
    // opacity value, so recall this function with the default hue and that given opacity.
    @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
        @return map-color($palette, default, $hue);
    }

    $color: map-get($palette, $hue);

    @if (type-of($color) != color) {
        // If the $color resolved to something different from a color (e.g. a CSS variable),
        // we can't apply the opacity anyway so we return the value as is, otherwise Sass can
        // throw an error or output something invalid.
        @return $color;
    }

    @return rgba($color, if($opacity == null, opacity($color), $opacity));
}

// Creates a container object for a light theme to be given to individual component theme mixins.
@function light-theme($name, $primary, $accent, $warn: map-palette($red), $success: map-palette($green)) {
    @return (
        name: $name,
        primary: $primary,
        accent: $accent,
        warn: $warn,
        success: $success,
        text: $dark-primary-text,
        background: $light-theme-background
    );
}
